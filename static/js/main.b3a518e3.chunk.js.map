{"version":3,"sources":["components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","useEffect","canvas","texts","counts","options","π","Math","PI","width","height","radius","padding","fontSize","tilt","initialVelocityX","initialVelocityY","initialRotationX","initialRotationZ","vx","vy","rx","rz","dx","dy","ctx","getContext","textAlign","style","scale","lastX","lastY","clicked","rot","x","y","t","cos","sin","addEventListener","event","screenX","screenY","looping","startLoop","e","rendererLoop","window","requestAnimationFrame","clearRect","ix","iz","text","degZ","length","degX","z","size","fillStyle","font","fillText","render","wordSphere","current","ref","App","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3a518e3.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\n\r\nconst Canvas = props => {\r\n\r\n\tconst canvasRef = useRef(null)\r\n\r\n  \tuseEffect(() => {\r\n    \tconst canvas = canvasRef.current\r\n    \t//Draw skils sphere\r\n    \tconst texts = [\r\n\t\t  'Firebase', 'MongoDB', 'SQL', 'Yarn', 'NPM',\r\n\t\t  'React', 'Docker', 'Bootstrap', 'Angular', '.Net',\r\n\t\t  'GraphQL', 'CSS', 'HTML5', 'PHP', 'JavaScript',\r\n\t\t  'Swift', 'C', 'Java', 'C#',\r\n\t\t];\r\n\t\tconst counts = [1,2,4,5,4,2,1];\r\n\r\n\t\tconst options = {\r\n\t\t  tilt: Math.PI / 9,\r\n\t\t  initialVelocityX: 0.9,\r\n\t\t  initialVelocityY: 0.7,\r\n\t\t  initialRotationX: Math.PI * 0.14,\r\n\t\t  initialRotationZ: 0\r\n\t\t};\r\n\r\n\t\twordSphere(canvas, texts, counts, options);\r\n\t\t \r\n\t\tfunction wordSphere(canvas, texts, counts, options) {\r\n\t\t  \tconst π = Math.PI; // happy math!\r\n\t\t  \tconst {\r\n\t\t\t    width = 500,\r\n\t\t\t    height = 500,\r\n\t\t\t    radius = 150,\r\n\t\t\t    padding = 50,\r\n\t\t\t    fontSize = 22,\r\n\t\t\t    tilt = 0,\r\n\t\t\t    initialVelocityX = 0,\r\n\t\t\t    initialVelocityY = 0,\r\n\t\t\t    initialRotationX = 0,\r\n\t\t\t    initialRotationZ = 0,\r\n\t\t  } = options;\r\n\t\t  \r\n\t\t  let vx = initialVelocityX, vy = initialVelocityY;\r\n\t\t  let rx = initialRotationX, rz = initialRotationZ;\r\n\t\t  let dx = 7, dy = 7;\r\n\t\t  // canvas setup\r\n\t\t  let ctx = canvas.getContext('2d'); \r\n\t\t  ctx.textAlign = 'center';\r\n\t\t  \r\n\t\t  // Hi-DPI support\r\n\t\t  canvas.width = width * 3;\r\n\t\t  canvas.height = height * 3;\r\n\t\t  canvas.style.width = `${width}px`;\r\n\t\t  canvas.style.height = `${height}px`;\r\n\t\t  ctx.scale(3,3); \r\n\r\n\t\t  // scrolling\r\n\t\t  let clicked = false, lastX, lastY;\r\n\t\t  canvas.addEventListener('mousedown', event => {\r\n\t\t    clicked = true;\r\n\t\t    lastX = event.screenX;\r\n\t\t    lastY = event.screenY;\r\n\t\t  });\r\n\t\t  canvas.addEventListener('mousemove', event => {\r\n\t\t    if (!clicked) return;\r\n\t\t    [dx, dy] = [event.screenX - lastX, event.screenY - lastY];\r\n\t\t    [lastX, lastY] = [event.screenX, event.screenY];\r\n\r\n\t\t    // rotation update\r\n\t\t    rz += -dy * 0.01;\r\n\t\t    rx += dx * 0.01;\r\n\r\n\t\t    // velocity update\r\n\t\t    vx = dx * 0.1;\r\n\t\t    vy = dy * 0.1;\r\n\r\n\t\t    if (!looping) startLoop();\r\n\t\t  });\r\n\t\t  canvas.addEventListener('mouseup', e => clicked = false);\r\n\t\t  canvas.addEventListener('mouseleave', e => clicked = false);\r\n\t\t  \r\n\t\t  function rot(x,y,t) {\r\n\t\t    return [x*Math.cos(t)-y*Math.sin(t), x*Math.sin(t)+y*Math.cos(t)];\r\n\t\t  }\r\n\r\n\t\t  function render() {\r\n\t\t    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t    let ix = 0, iz = 0, i = 1;\r\n\t\t    for (const text of texts) {\r\n\t\t      const degZ = (π/(counts.length-1)) * iz;\r\n\t\t      const degX = (2*π/counts[iz]) * ix;\r\n\r\n\t\t      let x = radius * Math.sin(degZ) * Math.cos(degX);\r\n\t\t      let y = radius * Math.sin(degZ) * Math.sin(degX); \r\n\t\t      let z = radius * Math.cos(degZ) + 8*(ix % 2) /* randomness */;\r\n\r\n\t\t      // camera transform\r\n\t\t      [y,z] = rot(y, z, tilt);\r\n\t\t      [x,z] = rot(x, z, rz);\r\n\t\t      [x,y] = rot(x, y, rx);\r\n\r\n\t\t      // convert to cartesian and then draw.\r\n\t\t      const alpha = 0.6 + 0.4 * (x/radius);\r\n\t\t      const size = fontSize + 2 + 5*(x/radius);\r\n\t\t      ctx.fillStyle = `rgba(0,255,255,1)`;\r\n\t\t      ctx.font = `${size}px \"Roboto\", sans-serif`;\r\n\t\t      ctx.fillText(text, y + width/2, -z + height/2);\r\n\r\n\t\t      ix--;\r\n\t\t      if (ix < 0) {\r\n\t\t        iz++;\r\n\t\t        ix = counts[iz] - 1;\r\n\t\t      }\r\n\t\t      i++;\r\n\t\t    }\r\n\t\t  }\r\n\r\n\t\t  // renderer\r\n\t\t  let looping = false;\r\n\t\t  function rendererLoop() {\r\n\t\t    if (looping) window.requestAnimationFrame(rendererLoop);\r\n\t\t    render();\r\n\t\t    \r\n\t\t    // deacceleration - dirty code xD\r\n\t\t    if (vx > 0) vx = vx - 0.01;\r\n\t\t    if (vy > 0) vy = vy - 0.01;\r\n\t\t    if (vx < 0) vx = vx + 0.01;\r\n\t\t    if (vy > 0) vy = vy + 0.01;\r\n\t\t    if (vx === 0 && vy === 0) stopLoop();\r\n\t\t    \r\n\t\t    rz += vy * 0.01;\r\n\t\t    rx += vx * 0.01;\r\n\t\t  }\r\n\r\n\t\t  function startLoop() {\r\n\t\t    looping = true;\r\n\t\t    window.requestAnimationFrame(rendererLoop);\r\n\t\t  }\r\n\r\n\t\t  function stopLoop() {\r\n\t\t    looping = false;\r\n\t\t  }\r\n\t\t  startLoop();\r\n\t\t}\r\n  }, [])\r\n  return <canvas ref={canvasRef} {...props}/>\r\n}\r\n\r\nexport default Canvas","import React from 'react';\nimport Canvas from './components/Canvas';\nimport './App.css';\n\nfunction App() {\n\n  return <Canvas class=\"SkillsSphere\"/>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}